#include<time.h>
#define MATRIX_FUNC
#define NUMT 4

void AllocBNormal()
{
	fprintf(stderr,"Allocating B\n");
	while( B == NULL )
	{
		B = (double**)malloc( sizeof(double*)*N );
	}
	
	register int iter;
	for( iter=0 ; iter<N ; iter+=1 )
	{
		B[iter] = NULL;
		while( B[iter] == NULL )
		{
			B[iter] = (double*)malloc( sizeof(double)*N );
		}
	}
	fprintf(stderr,"Done Allocating B\n");
	return;
}

void GetBNormal()
{
	register int iter1;
	fseek(input,sizeof(double)*N*N,SEEK_SET);
	for( iter1 = 0; iter1<N ; iter1+=1 )
	{
		fread(B[iter1],sizeof(double),N,input);
	}
}

void MultABSimpleSeq()
{
	register int iter1,iter2,iter3;
	double A[N],C[N],time_taken=0.0f;
	register clock_t start;
	//register double *a = A,*c = C;
	register double result;

	fseek(input,0,SEEK_SET);

	for( iter1=0 ; iter1<N ; iter1+=1/*,a+=1,c+=1*/ )
	{
		fprintf(stderr,"\r%i/%i",iter1+1,N);
		fread(A,sizeof(double),N,input);
		start = clock();
		for(iter2=0 ; iter2<N ; iter2+=1 )
		{
			result = 0.0f;
		//	C[iter2] = 0.0f;
			for( iter3=0 ; iter3<N ; iter3+=1 )
			{
			//	result += *(*(a)+iter3) * *(*(B+iter3)+iter2) ;
				result += A[iter3]*B[iter3][iter2];
			}
		//	*(*(c)+iter2) = result;
			C[iter2] = result;
		}
		time_taken += ((double)(clock()-start))/CLOCKS_PER_SEC ;
		fwrite(C,sizeof(double),N,output);
	}
//	fprintf(stderr,"\ntime taken:%lf sec\n",time_taken);
	printf("\n%i : %lf",N,time_taken);
}

void FreeB()
{
	register int iter;
	fprintf(stderr,"Freeing B\n");
	for( iter=0 ; iter<N ; iter += 1)
	{
		free(B[iter]);
	}

	free(B);
	fprintf(stderr,"Done Freeing B\n");
	return;
}
